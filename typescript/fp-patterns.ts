//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// CALLBACK (КОЛБЭК)
// Цель: передать функцию внутрь другой функции для вызова в будущем
// Вариант применения: чтобы сделать функцию обобщенной и сосредоточенной на
// одной конкретной задаче - можно выделить части логики в колбэки и вызывать
// их по мере необходимости. Так же активно используется в обработке событий и
// таймаутов.

type callback<T> = (arg: T) => T;

const someFunctionWhichOnlyReturnsSomeString = (cb: callback<string>) => {
  const str = 'ПрИвЕт!';
  return cb(str);
};

const someCBWhichDoesSomeAdditionalUsefulWork = (str: string) => {
  return str.toUpperCase();
};

// console.log(
//   someFunctionWhichOnlyReturnsSomeString(
//     someCBWhichDoesSomeAdditionalUsefulWork
//   )
// );
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// LAZY FUNCTION DEFINITION (ЛЕНИВОЕ ОПРЕДЕЛЕНИЕ ФУНКЦИИ)
// Цель: создать функцию, которая выполнит какие-либо действия при первом вызове,
// а потом будет выполнять другие действия
// Применение: нужно выполнить какую-лтбо инициализацию 1 раз и получить
// полезную функцию для дальнейшего использования
// Примечание: паттерн называется ленивое определение функции, т.к. реальное
// определение функции происходит только после первого её вызова

let lazilyDefinedFunc = () => {
  console.log('Функция выполнила инициализацию');
  lazilyDefinedFunc = () => {
    console.log('Теперь функция делает другую работу');
  };
};

lazilyDefinedFunc();
lazilyDefinedFunc();
lazilyDefinedFunc();
