// Интерфейс определяет ожидаемые клиентом методы, которые должны быть
// реализованы как классом, представляющим конкретный объект, так и классом
// нулевого объекта
interface AbstractEntity {
  doSomething(): void;
}

// Класс конкретного объекта, реализует интерфейс и выполняет реальную бизнес-
// логику
class ConcreteEntity implements AbstractEntity {
  doSomething(): void {
    console.log('Это конкретный объект, я выполнил какую-то реальную работу.');
  }
}

// Класс нулевого объекта, реализует интерфейс и не выполняет бизнес-логику, а
// применяется в качестве заглушки на месте, где ожидается реальный объект
class NullEntity implements AbstractEntity {
  doSomething(): void {
    console.log(
      'Это нулевой объект, я ничего не сделал, нахожусь тут просто в качестве \
 замены конкретному объекту.'
    );
  }
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//------------------------------- Клиентский код -------------------------------
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const useEntity = (e: AbstractEntity) => {
  e.doSomething();
};

const ce = new ConcreteEntity();
const ne = new NullEntity();

useEntity(ce);
useEntity(ne);
